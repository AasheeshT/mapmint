#!/usr/bin/env python
# -*- coding: UTF-8 -*-




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import zoo
import zoo
from datetime import datetime

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1444635804.802332
__CHEETAH_genTimestamp__ = 'Mon Oct 12 09:43:24 2015'
__CHEETAH_src__ = '/Users/djay/Sites/progede2/mapmint-ui/templates/Skeleton_bs.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Oct 12 09:41:13 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Skeleton_bs(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Skeleton_bs, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        try: # generated from line 11, col 1
            verr = VFFSL(SL,"errorMsg",True)
        except: # generated from line 13, col 1
            verr = None
        write(u'''<!DOCTYPE html>
<html lang="''')
        _v = VFN(VFFSL(SL,"conf",True)["main"]["lang"],"split",False)('-')[0] # u'$(conf["main"]["lang"].split(\'-\')[0])' on line 17, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$(conf["main"]["lang"].split(\'-\')[0])')) # from line 17, col 13.
        write(u'''">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="description" content="''')
        _v = VFN(VFFSL(SL,"zoo",True),"_",False)("MapMint: Professional SDI manager") # u'$zoo._("MapMint: Professional SDI manager")' on line 23, col 35
        if _v is not None: write(_filter(_v, rawExpr=u'$zoo._("MapMint: Professional SDI manager")')) # from line 23, col 35.
        write(u'''">
<meta name="keywords" content="MapMint, SDI, Geospatial, Web GIS, GIS, WPS, WMS, WFS, WCS, ZOO-Project, ZOO, ZOO WPS, MapServer, GDAL, OSGeo, FOSS4G, OGC, OWS">
<meta name="copyright" content="''')
        _v = VFFSL(SL,"conf",True)["provider"]["providerName"] # u'$conf["provider"]["providerName"]' on line 25, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["provider"]["providerName"]')) # from line 25, col 33.
        write(u'''">
<meta name="author" content="''')
        _v = VFFSL(SL,"conf",True)["provider"]["providerName"] # u'$conf["provider"]["providerName"]' on line 26, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["provider"]["providerName"]')) # from line 26, col 30.
        write(u'''">
<link rel="shortcut icon" href="''')
        _v = VFFSL(SL,"conf",True)["main"]["mmAddress"] # u'$conf["main"]["mmAddress"]' on line 27, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["mmAddress"]')) # from line 27, col 33.
        write(u'''/favicon.ico" />
<link rel="alternate" type="application/rss+xml" title="MapMint RSS Feed" href="''')
        _v = VFFSL(SL,"conf",True)["main"]["applicationAddress"] # u'$(conf["main"]["applicationAddress"])' on line 28, col 81
        if _v is not None: write(_filter(_v, rawExpr=u'$(conf["main"]["applicationAddress"])')) # from line 28, col 81.
        write(u'''public/rss" />
<title>''')
        _v = VFFSL(SL,"page_title",True) # u'$page_title' on line 29, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'$page_title')) # from line 29, col 8.
        write(u'''</title>


<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 32, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 32, col 13.
        write(u'''/css/bootstrap.min.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 33, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 33, col 13.
        write(u'''/css/mapmint-admin.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 34, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 34, col 13.
        write(u'''/assets/css/mm-font.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 35, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 35, col 13.
        write(u'''/css/mm_icons.css" rel="stylesheet">
<link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 37, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 37, col 13.
        write(u'''/css/metisMenu.min.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 38, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 38, col 13.
        write(u'''/assets/css/bootstrap-notify.css" rel="stylesheet">
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 39, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 39, col 13.
        write(u'''/assets/css/summernote.css" rel="stylesheet">
<!--
<link href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro-icons.min.css" rel="stylesheet">
-->

''')
        if VFFSL(SL,"istyles",True) is not None: # generated from line 44, col 1
            _v = VFFSL(SL,"istyles",True) # u'$istyles' on line 45, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$istyles')) # from line 45, col 1.
            write(u'''
''')
        write(u'''
<link href="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 48, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 48, col 13.
        write(u'''/assets/css/mapmint-fixes.css" rel="stylesheet">

</head>
<body>
''')
        if VFFSL(SL,"mmodule",True)!="public": # generated from line 52, col 1
            if (VFN(VFN(VFFSL(SL,"conf",True),"keys",False)(),"count",False)("senv")>0 and VFN(VFN(VFFSL(SL,"conf",True)["senv"],"keys",False)(),"count",False)("loggedin")>0 and VFN(VFN(VFFSL(SL,"conf",True)["senv"],"keys",False)(),"count",False)("lastname")>0 and VFFSL(SL,"conf",True)["senv"]["loggedin"]!="false") and not(VFFSL(SL,"verr",True)): # generated from line 53, col 1
                write(u'''<div id="wrapper">

  <!-- Navigation -->
  <nav class="navbar navbar-default navbar-fixed-top" role="navigation" style="margin-bottom: 0">
   <div class="navbar-header">
     <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
     <span class="sr-only">Toggle navigation</span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
     </button>
     <a class="navbar-brand" href="#"><i class="mmi mmi-''')
                _v = VFN(VFFSL(SL,"mmodule",True),"lower",False)() # u'$(mmodule.lower())' on line 65, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$(mmodule.lower())')) # from line 65, col 57.
                write(u'''"></i> <span class="hid">''')
                _v = VFN(VFFSL(SL,"zoo",True),"_",False)(VFFSL(SL,"mmodule",True)) # u'$zoo._($mmodule)' on line 65, col 100
                if _v is not None: write(_filter(_v, rawExpr=u'$zoo._($mmodule)')) # from line 65, col 100.
                write(u'''</span></a>
   </div>
   <!-- /.navbar-header -->

   <ul class="nav navbar-top-links navbar-right" id="admin-submenu">
''')
                if VFFSL(SL,"admin_menu",True) is not None: # generated from line 70, col 1
                    write(u'''    ''')
                    _v = VFFSL(SL,"admin_menu",True) # u'$admin_menu' on line 71, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$admin_menu')) # from line 71, col 5.
                    write(u'''
''')
                write(u'''     <li class="dropdown">
       <a class="dropdown-toggle" data-toggle="dropdown" href="#empty">
         <i class="fa fa-user fa-fw"></i>  <i class="fa fa-caret-down"></i>
       </a>
       <ul class="dropdown-menu dropdown-user">
\t <li><a href="#"><i class="fa fa-user fa-fw"></i> User Profile</a>
\t </li>
\t <li><a href="#"><i class="fa fa-gear fa-fw"></i> Settings</a>
\t </li>
\t <li class="divider"></li>
\t <li><a href="#"><i class="fa fa-sign-out fa-fw"></i> Logout</a>
\t </li>
       </ul>
       <!-- /.dropdown-user -->
     </li>
   </ul>
\t    
''')
                if VFFSL(SL,"conf",True)["mm"]["indexes"]=="true": # generated from line 90, col 1
                    menu = ['Dashboard','Distiller','Territories','Indexes','Themes','Documents','Manager','Publisher']
                else: # generated from line 92, col 1
                    if VFFSL(SL,"conf",True)["mm"]["documents"]=="true": # generated from line 93, col 1
                        menu = ['Dashboard','Distiller','Manager','Themes','Documents','Publisher']
                    else: # generated from line 95, col 1
                        menu = ['Dashboard','Distiller','Manager','Themes','Publisher']
                write(u'''\t    
\t  <div class="navbar-default sidebar" role="navigation">
\t  <div class="sidebar-nav navbar-collapse">
\t    <ul class="nav" id="side-menu">


''')
                for a in VFFSL(SL,"menu",True): # generated from line 105, col 1
                    write(u'''\t      <li ''')
                    if VFFSL(SL,"inputs",True)['tmpl']['value']==VFFSL(SL,"a",True)+"_bs": # generated from line 106, col 12
                        write(u'''class="active"''')
                    write(u'''>
\t      <a href="''')
                    if VFFSL(SL,"inputs",True)['tmpl']['value']==VFFSL(SL,"a",True)+"_bs": # generated from line 107, col 17
                        write(u'''#" class="active"''')
                    else: # generated from line 107, col 74
                        write(u'''./''')
                        _v = VFFSL(SL,"a",True) # u'$(a)' on line 107, col 82
                        if _v is not None: write(_filter(_v, rawExpr=u'$(a)')) # from line 107, col 82.
                        write(u'''_bs"''')
                    write(u'''><i class="mmi mmi-''')
                    _v = VFN(VFFSL(SL,"a",True),"lower",False)() # u'$(a.lower())' on line 107, col 117
                    if _v is not None: write(_filter(_v, rawExpr=u'$(a.lower())')) # from line 107, col 117.
                    write(u''' fa-fw"></i> ''')
                    _v = VFN(VFFSL(SL,"zoo",True),"_",False)(VFFSL(SL,"a",True)) # u'$zoo._($a)' on line 107, col 142
                    if _v is not None: write(_filter(_v, rawExpr=u'$zoo._($a)')) # from line 107, col 142.
                    write(u'''
''')
                    if VFFSL(SL,"mmenu",True) is not None and VFFSL(SL,"inputs",True)['tmpl']['value']==VFFSL(SL,"a",True)+"_bs": # generated from line 108, col 1
                        write(u'''<span class="fa arrow"></span>
\t      </a>
\t      ''')
                        _v = VFFSL(SL,"mmenu",True) # u'$mmenu' on line 111, col 8
                        if _v is not None: write(_filter(_v, rawExpr=u'$mmenu')) # from line 111, col 8.
                        write(u'''
''')
                    else	      : # generated from line 112, col 1
                        write(u'''\t      </a>
''')
                    write(u'''\t      </li>
''')
                write(u'''\t    </ul>
\t  </div>
\t  <!-- /.sidebar-collapse -->
          </div>
\t  <!-- /.navbar-static-side -->
        </nav>

\t<div id="page-wrapper">

\t<div class=\'notifications top-right\'></div>
''')
        write(u'''
''')
        _v = VFFSL(SL,"body",True) # u'$body' on line 130, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$body')) # from line 130, col 1.
        write(u'''

''')
        if VFFSL(SL,"tfooter",True) is not None: # generated from line 132, col 1
            _v = VFFSL(SL,"tfooter",True) # u'$tfooter' on line 133, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$tfooter')) # from line 133, col 1.
            write(u'''
''')
        write(u'''\t</div>
''')
        if VFFSL(SL,"mmodule",True)!="public" and (VFN(VFN(VFFSL(SL,"conf",True),"keys",False)(),"count",False)("senv")>0 and VFFSL(SL,"conf",True)["senv"]["loggedin"]!="false" and VFN(VFN(VFFSL(SL,"conf",True)["senv"],"keys",False)(),"count",False)("firstname")>0) and not(VFFSL(SL,"verr",True)): # generated from line 136, col 1
            write(u'''<div class="ui-layout-south hide"></div>
''')
        else: # generated from line 138, col 1
            if VFN(VFN(VFFSL(SL,"conf",True)["mm"],"keys",False)(),"count",False)("nofooter")==0 or (VFFSL(SL,"conf",True)["mm"]["nofooter"]!="true" and VFN(VFN(VFFSL(SL,"conf",True)["mm"],"keys",False)(),"count",False)("nofooter")>0): # generated from line 139, col 1
                write(u'''<footer>
  <div class="container text-center">
''')
                d = datetime.today()
                write(u'''    <p>Copyright &copy; <a href="''')
                _v = VFFSL(SL,"conf",True)["provider"]["providerSite"] # u'$conf["provider"]["providerSite"]' on line 144, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$conf["provider"]["providerSite"]')) # from line 144, col 34.
                write(u'''">''')
                _v = VFFSL(SL,"conf",True)["provider"]["providerName"] # u'$conf["provider"]["providerName"]' on line 144, col 69
                if _v is not None: write(_filter(_v, rawExpr=u'$conf["provider"]["providerName"]')) # from line 144, col 69.
                write(u'''</a> ''')
                _v = VFFSL(SL,"d.year",True) # u'$d.year' on line 144, col 107
                if _v is not None: write(_filter(_v, rawExpr=u'$d.year')) # from line 144, col 107.
                write(u'''</p>
  </div>
</footer>
''')
        write(u'''
<!--
<button style="position:absolute;bottom:0px" onclick="if($(\'.sidebar\').is(\':visible\')){$(\'#page-wrapper\').css({\'margin\':\'50px 0 0 0px\'});$(\'.sidebar\').hide();}else{$(\'#page-wrapper\').css({\'margin\':\'50px 0 0 250px\'});$(\'.sidebar\').show();}" class="btn btn-default"><i class="fa fa-eye"></i></button>
-->
</div>

<script data-main="''')
        _v = VFFSL(SL,"conf",True)["main"]["mmAddress"] # u'$conf["main"]["mmAddress"]' on line 155, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["mmAddress"]')) # from line 155, col 20.
        write(u'''/admin;module=''')
        _v = VFFSL(SL,"mmodule",True) # u'$mmodule' on line 155, col 60
        if _v is not None: write(_filter(_v, rawExpr=u'$mmodule')) # from line 155, col 60.
        write(u'''" src="''')
        _v = VFFSL(SL,"conf",True)["main"]["publicationUrl"] # u'$conf["main"]["publicationUrl"]' on line 155, col 75
        if _v is not None: write(_filter(_v, rawExpr=u'$conf["main"]["publicationUrl"]')) # from line 155, col 75.
        write(u'''/assets/js/lib/require.js"></script>

</body>
</html>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    js1 = ["main_js"] 

    js3 = [] 

    mmodule = "Distiller"

    mmenu = None

    admin_menu = None

    istyles = None

    tfooter = None

    _mainCheetahMethod_for_Skeleton_bs= 'respond'

## END CLASS DEFINITION

if not hasattr(Skeleton_bs, '_initCheetahAttributes'):
    templateAPIClass = getattr(Skeleton_bs, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Skeleton_bs)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Skeleton_bs()).run()


